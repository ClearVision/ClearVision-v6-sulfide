@use "backend" as *;

/* PRIVATE CHANNELS */
#{c(sidebar privateChannels)} {
  background: transparent;
  #{c(sidebar scroller)} {
    background: transparent;
  }
}

// HEADER
#{c(sidebar privateChannelsHeaderContainer)} {
  display: flex;
  align-items: center;
  justify-content: center;
  color: cv('colors.main');
  font-weight: 700;
  text-align: center;
  &:hover {
    color: cv('colors.main');
  }
  &:before {
    content: '';
    height: 2px;
    flex-grow: 1;
    transition: all 0.3s ease-in-out;
    background: linear-gradient(to left, cv('colors.main') 50%, transparent);
    margin-right: 5px;
  }
  &:after {
    content: '';
    height: 2px;
    flex-grow: 1;
    transition: all 0.3s ease-in-out;
    background: linear-gradient(to right, cv('colors.main') 50%, transparent);
    margin-left: 5px;
  }
  #{c(sidebar privateChannelsHeader)} {
    overflow: visible;
  }
  #{c(sidebar privateChannelRecipientsInviteButtonIcon)} {
    color: cv('colors.main');
    transition: all 0.1s ease-in-out;
    &:hover {
      color: cv('colors.hover');
    }
  }
}

// PRIVATE CHANNEL
#{c(sidebar privateChannel)} {
  max-width: none;
}
#{c(sidebar privateChannelInteractive2)} {
  position: relative;
  z-index: 1;
  &:before {
    content: '';
    position: absolute;
    @include stretch;
    border-radius: 3px;
    transition: all 0.15s ease-in-out;
    z-index: -1;
    pointer-events: none;
  }
  &:after {
    content: '';
    position: absolute;
    @include pos(0, 100%, 0, 0);
    border-radius: 3px;
    opacity: 0.9;
    transition: all 0.3s ease-in-out;
    z-index: -1;
    pointer-events: none;
  }
  #{c(other cv privateChannelIcon)},
  #{c(sidebar privateChannelName)} {
    color: rgba(255, 255, 255, 0.4);
    font-size: 14px;
    transition: all 0.15s ease-in-out;
    overflow: hidden;
  }
  #{c(other cv privateChannelActivityText)} {
    strong {
      color: cv('colors.main');
      font-weight: 700;
      transition: all 0.15s ease-in-out;
    }
  }
  #{c(other cv privateChannelCloseButton)} {
    color: #fff;
  }

  // HOVER
  &:hover {
    background: transparent;
    &:before {
      background: hsla(0, 0%, 100%, 0.1);
    }
    #{c(other cv privateChannelIcon)},
    #{c(sidebar privateChannelName)} {
      color: hsla(0, 0%, 100%, 0.7);
    }
    #{c(other cv privateChannelCloseButton)} {
      opacity: 0.3;
      &:hover {
        opacity: 0.7;
      }
    }
  }

  // SELECTED
  &#{c(sidebar privateChannelInteractiveSelected)} {
    background: transparent;
    &:before {
      background: hsla(0, 0%, 100%, 0.1);
    }
    &:after {
      right: 0;
      background: cv('colors.main');
      animation: cv-channel-select 0.3s ease-in-out;
    }
    #{c(other cv privateChannelIcon)},
    #{c(sidebar privateChannelName)} {
      color: #fff;
    }
    #{c(other cv privateChannelActivityEmoji)},
    #{c(other cv privateChannelActivityIcon)} {
      filter: drop-shadow(0 0 3px rgba(0, 0, 0, 0.7));
    }
    #{c(other cv privateChannelActivityText)} {
      strong {
        color: #fff;
      }
    }
    #{c(other cv privateChannelCloseButton)} {
      opacity: 0.7;
      &:hover {
        opacity: 1;
      }
    }
  }

  // HIGHLIGHT
  #{c(sidebar privateChannelHighlighted)} {
    #{c(sidebar privateChannelName)} {
      color: #fff;
    }
  }
}

// Activities popout
#{c(other cv privateChannelActivityContainer)} {
  background: var(--background-overlay);
}

// EMPTY PRIVATE CHANNEL
#{c(sidebar privateChannelLoadingEmpty)} {
  fill: hsla(0, 0%, 100%, 0.15);
}

// PRIVATE CHANNELS SEARCH BAR
#{c(sidebar searchBar)} {
  #{c(sidebar searchBarComponent)} {
    background: hsla(0, 0%, 100%, 0.1);
    color: hsla(0, 0%, 100%, 0.3);
  }
}
