@use "backend" as *;

/* CHANNELS */
#{c(sidebar sidebar)} {
  background: rgba(0, 0, 0, calc(cv('bg.app.shading') * 0.3));
  &:not(#{c(other cv channelsSidebarHidden)}) {
    width: cv('channels-width') !important;
  }
  #{c(os win platform)} & {
    border-radius: 0;
  }
}
#{c(main dark)} #{c(sidebar server container)} {
  background: transparent;
}

// CHANNELS HEADER
#{c(sidebar server header header)} {
  height: 48px;
  color: #fff;
  font-family: cv('font.main');
  font-weight: 600;
  text-shadow: 0 0 3px #000;
  &:hover {
    background-color: hsla(0, 0%, 100%, 0.1);
  }
}

// GUILD BANNER
#{c(sidebar server header bannerContainer)} {
  background: transparent;
  box-shadow: none;
}
#{c(sidebar server header bannerImage)} {
  width: cv('channels-width');
  mask: linear-gradient(to bottom, #000, transparent);
}
#{c(sidebar threadsSpine)} {
  color: cv('colors.main');
}
#{c(other cv threadChannelSpine)} {
  background: cv('colors.main');
}

// SERVER BOOST
#{c(main dark)} #{c(sidebar boostProgressBarContainer)} {
  background-color: hsla(0, 0%, 0%, 0.4);
}

// CHANNEL CONTENT
#{c(sidebar server channel link)} {
  transition: all 0.15s ease-in-out;
}
#{c(sidebar server channel link)} {
  position: relative;
  background: transparent !important;
  &:before {
    content: '';
    position: absolute;
    @include stretch;
    transition: all 0.15s ease-in-out;
    z-index: -1;
    pointer-events: none;
    border-radius: 4px;
  }
  &:after {
    content: '';
    position: absolute;
    @include pos(0, 100%, 0, 0);
    opacity: 0.9;
    transition: all 0.3s ease-in-out;
    z-index: -1;
    pointer-events: none;
    border-radius: 4px;
  }
  #{c(sidebar server channel icon)} {
    width: 18px;
    height: 18px;
    margin-right: 3px;
    color: var(--channel-color);
    opacity: 1;
    transition: all 0.15s ease-in-out;
    > path {
      opacity: 0.7;
    }
    > path:last-of-type {
      opacity: 1;
    }
  }
  #{c(sidebar server channel name)} {
    color: var(--channel-color);
    transition: all 0.15s ease-in-out;
  }
}
#{c(sidebar server channel children)} {
  margin-left: 1px;
  animation: cv-fade-to-3 0.15s ease-in-out;
}
#{c(sidebar server channel actionIcon)} {
  color: #fff;
  opacity: 0.3;
  transition: all 0.15s ease-in-out;
  path {
    fill: #fff;
  }
  &:hover {
    opacity: 0.7;
  }
}
#{c(sidebar server channel statusText)},
#{c(sidebar server channel pencilIcon)} {
  color: hsla(0, 0%, 100%, 0.7);
}
#{c(sidebar server channel wrapper)} {
  // HOVER
  &:hover {
    #{c(sidebar server channel name)},
    #{c(sidebar server channel icon)} {
      color: #fff;
    }
    #{c(sidebar server channel link)} {
      background: var(--bg-overlay-hover, var(--background-modifier-hover));
      &:before {
        background: hsla(0, 0%, 100%, 0.1);
      }
      #{c(sidebar server channel linkTop)} {
        #{c(sidebar server channel container)} & {
          #{c(sidebar server channel icon)},
          #{c(sidebar server channel name)} {
            color: hsla(0, 0%, 100%, 0.7);
          }
        }
      }
    }
  }
  // UNREAD
  &#{c(sidebar server channel modeUnreadImportant)} {
    #{c(sidebar server channel link)} {
      #{c(sidebar server channel linkTop)} {
        #{c(sidebar server channel name)} {
          color: var(--channel-unread);
          text-shadow: 0 0 3px;
        }
        #{c(sidebar server channel icon)} {
          color: var(--channel-unread);
          filter: drop-shadow(0 0 3px);
          opacity: 1;
        }
      }
    }
    &:hover {
      #{c(sidebar server channel link)} {
        #{c(sidebar server channel linkTop)} {
          #{c(sidebar server channel name)} {
            color: var(--channel-text-selected);
          }
          #{c(sidebar server channel icon)} {
            color: var(--channel-text-selected);
          }
        }
      }
    }
  }
  // SELECTED
  &#{c(sidebar server channel modeSelected)} {
    #{c(sidebar server channel name)},
    #{c(sidebar server channel icon)} {
      color: #fff;
    }
    #{c(sidebar server channel link)} {
      &:before {
        background: hsla(0, 0%, 100%, 0.1);
      }
      &:after {
        right: 0;
        background: cv('colors.main');
        animation: cv-channel-select 0.3s ease-in-out;
      }
      #{c(sidebar server channel container)} & {
        #{c(sidebar server channel icon)},
        #{c(sidebar server channel name)} {
          color: var(--channel-text-selected);
        }
        #{c(friends live)} {
          color: var(--channel-text-selected) !important;
        }
      }
      #{c(sidebar server channel actionIcon)} {
        opacity: 0.7;
        &:hover {
          opacity: 1;
        }
      }
    }
    // #{c(text text xs medium)},
    // #{c(other cv textExtraSmallNormal)} {
    //   color: #fff !important;
    // }
  }

  // CONNECTED
  &#{c(sidebar server channel modeConnected)} {
    #{c(sidebar server channel link)} {
      #{c(sidebar server channel linkTop)} {
        #{c(sidebar server channel name)} {
          color: cv('colors.main');
          text-shadow: 0 0 3px;
        }
        #{c(sidebar server channel icon)} {
          color: cv('colors.main');
          filter: drop-shadow(0 0 3px);
        }
      }
    }
  }
  // MUTED
  &#{c(sidebar server channel modeMuted)} {
    #{c(sidebar server channel link)} {
      #{c(sidebar server channel linkTop)} {
        #{c(sidebar server channel icon)},
        #{c(sidebar server channel name)} {
          color: var(--muted-color);
        }
      }
    }
    &:hover {
      #{c(sidebar server channel link)} {
        #{c(sidebar server channel linkTop)} {
          &:before {
            background: hsla(0, 0%, 100%, 0.07);
          }
          #{c(sidebar server channel container)} & {
            #{c(sidebar server channel icon)},
            #{c(sidebar server channel name)} {
              color: var(--channel-color);
            }
          }
        }
      }
    }
  }
}

// UNREAD & MENTIONS INDICATION
#{c(sidebar server channel unreadBlob)} {
  display: none;
}

// ICONS
#{c(friends live)} {
  background-color: cv('colors.main') !important;
}

// USER LIMIT
#{c(sidebar server channel voiceLimitUsers)},
#{c(sidebar server channel voiceLimitTotal)} {
  width: 24px;
  color: hsla(0, 0%, 100%, 0.3);
  font-weight: 600;
  text-align: right;
  transition: all 0.15s ease-in-out;
}
#{c(sidebar server channel voiceLimitUsers)} {
  padding: 0 4px 0 6px;
  background: rgba(0, 0, 0, 0.15);
}
#{c(sidebar server channel voiceLimitTotal)} {
  padding: 0 6px 0 4px;
  background: hsla(0, 0%, 100%, 0.04);
  box-shadow: inset 1px 0 hsla(0, 0%, 100%, 0.07);
  &:after {
    display: none;
  }
}
#{c(sidebar server channel modeConnected)} {
  #{c(sidebar server channel voiceLimitUsers)} {
    color: cv('colors.main');
    text-shadow: 0 0 1px;
  }
}

// VOICE USER LIST
#{c(sidebar server channel voice listDefault)} {
  padding-left: 24px;
  #{c(sidebar server channel voice clickable)}:hover #{c(sidebar server channel voice userContent)} {
    background: rgba(0, 0, 0, 0.04);
  }
}

#{c(sidebar server channel voice user)} {
  z-index: 1;
  #{c(sidebar server channel voice userContent)} {
    border-radius: 3px;
    transition: all 0.15s ease-in-out;
  }
  &:hover,
  &:active,
  &#{c(sidebar server channel voice selected)} {
    #{c(sidebar server channel voice listDefault)} & {
      #{c(sidebar server channel voice userContent)} {
        background: hsla(0, 0%, 100%, 0.04);
      }
      #{c(sidebar server channel voice username)} {
        color: hsla(0, 0%, 100%, 0.7);
      }
    }
  }
  #{c(sidebar server channel voice avatarSpeaking)} {
    position: relative;
    transition: all 0.1s ease-in-out;
    &:after {
      content: '';
      position: absolute;
      height: 1.7em;
      background: linear-gradient(to right, cv('colors.main') 10%, transparent);
      opacity: 0.5;
      transition: all 0.1s ease-in-out, width 0.15s ease-in-out;
      pointer-events: none;
      z-index: -1;
      border-radius: 999px;
      border-top-right-radius: 0;
      border-bottom-right-radius: 0;
    }
  }
  #{c(sidebar server channel voice avatarSpeaking)} {
    box-shadow: 0 0 0 2px cv('colors.main'), inset 0 0 3px rgba(0, 0, 0, 0.5);
    &:after {
      @include pos($top: -2px, $bottom: -2px);
      width: 150px;
    }
  }
  #{c(sidebar server channel voice username)} {
    color: hsla(0, 0%, 100%, 0.5);
    transition: all 0.1s ease-in-out;
  }
  #{c(sidebar server channel voice usernameSpeaking)} {
    color: #fff !important;
  }
}
#{c(sidebar server category voiceChannelsButton)} {
  border: 1px solid cv('colors.main');
  &:hover {
    background: cv('colors.hover');
    border: 1px solid cv('colors.hover');
    transition: ease-in-out 0.15s;
  }
}

// USER SUMMARY
#{c(other cv userSummaryIcon)} {
  width: 18px;
  height: 18px;
  margin-right: 3px;
  color: hsla(0, 0%, 100%, 0.3);
}
#{c(other cv userSummaryMoreUsers)} {
  padding: 0 4px;
  background: rgba(0, 0, 0, 0.3);
  border-radius: 10px;
}

// DRAG INDICATORS
:is(#{c(sidebar server dragAfter)}, #{c(sidebar server dragBefore)}),
:is(#{c(sidebar server channel dragBefore)},#{c(sidebar server channel dragAfter)}) {
  &:before,
  &:after {
    background: cv('colors.main');
    border-radius: 0;
  }
}
#{c(sidebar server channel userOver)} {
  &:after {
    background: cv('colors.main');
    border-color: transparent;
    opacity: 0.1;
  }
}

// VC STREAM POPOUT
#{c(main dark)} {
  #{c(other cv streamPopoutPreview)} {
    background-color: cv('bg.general.popout');
  }
  #{c(other cv streamPopoutPreviewContainer)} {
    background-color: transparent;
  }
  #{c(other cv streamPopoutWatchButton)} {
    border-color: cv('colors.main');
    color: hsla(0, 0%, 100%, 0.8);
    &:not([disabled]):hover {
      border-color: cv('colors.hover');
      color: #fff;
    }
  }
}